{
    // Place your leetcode 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "head.python": {
        "scope": "python",
        "prefix": "head",
        "body": [
            "#%%",
            "from typing import List",
        ]
    },
    "link.cpp": {
        "scope": "cpp",
        "prefix": "link",
        "body": [
            "struct ListNode {",
            "   int val;",
            "    ListNode *next;",
            "    ListNode() : val(0), next(nullptr) {}",
            "    ListNode(int x) : val(x), next(nullptr) {}",
            "    ListNode(int x, ListNode *next) : val(x), next(next) {}",
            "};"
        ]
    },
    "link.python": {
        "scope": "python",
        "prefix": "link",
        "body": [
            "class ListNode:",
            "    def __init__(self, val=0, next=None):",
            "        self.val = val",
            "        self.next = next",
            "",
            "",
            "def generate(vals: List[int]) -> ListNode:",
            "    ans = ListNode(-1, None)",
            "    tail = ans",
            "    for x in vals:",
            "        t = ListNode(x, None)",
            "        tail.next = t",
            "        tail = t",
            "    return ans.next",
            "",
            "",
            "def show(head: ListNode) -> List[int]:",
            "    ans = list()",
            "    h = head",
            "    while h:",
            "        ans.append(h.val)",
            "        h = h.next",
            "    return ans",
            "",
            ""
        ]
    },
    "tree.cpp": {
        "scope": "cpp",
        "prefix": "tree",
        "body": [
            "struct TreeNode {",
            "    int val;",
            "    TreeNode *left;",
            "    TreeNode *right;",
            "    TreeNode() : val(0), left(nullptr), right(nullptr) {}",
            "    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
            "    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}",
            "};"
        ]
    },
    "tree.python": {
        "scope": "python",
        "prefix": "tree",
        "body": [
            "#%%",
            "class TreeNode:",
            "    def __init__(self, val=0, left=None, right=None):",
            "        self.val = val",
            "        self.left = left",
            "        self.right = right",
            "",
            "def stringToTree(s: str) -> TreeNode:",
            "    if s == '[]':",
            "        return None",
            "    tree = [x.strip() for x in s[1:-1].split(',')]",
            "    for i in range(len(tree)):",
            "        tree[i] = int(tree[i]) if tree[i] != 'null' else None",
            "    root = TreeNode(tree.pop(0))",
            "    layer = [root]",
            "    while layer and tree:",
            "        if t := layer.pop(0):",
            "            if x:=tree.pop(0):",
            "                t1 = TreeNode(x)",
            "                layer.append(t1)",
            "                t.left = t1",
            "            else:",
            "                t.left = None",
            "            if x:=tree.pop(0):",
            "                t2 = TreeNode(x)",
            "                layer.append(t2)",
            "                t.right = t2",
            "            else:",
            "                t.right = None",
            "    return root",
            "def treeToString(root: TreeNode) -> str:",
            "    #  树结构转字符串, 层次遍历",
            "    if not root:",
            "        return []",
            "    p = [root]",
            "    ans = []",
            "    while p:",
            "        if len(p) == p.count(None):",
            "            break",
            "        t = p.pop(0)",
            "        if t:",
            "            ans.append(t.val)",
            "            p.append(t.left)",
            "            p.append(t.right)",
            "        else:",
            "            ans.append(None)",
            "    return ans"
        ]
    }
}